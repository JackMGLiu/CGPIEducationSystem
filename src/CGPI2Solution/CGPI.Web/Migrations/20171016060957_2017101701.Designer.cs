// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using QJ.Framework.Entity.DbContext;
using System;

namespace CGPI.Web.Migrations
{
    [DbContext(typeof(CGPIDbContext))]
    [Migration("20171016060957_2017101701")]
    partial class _2017101701
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.0-rtm-26452")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("QJ.Framework.Entity.Entities.Educational.ClassInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ClassId");

                    b.Property<string>("ClassCode")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("ClassContent")
                        .HasMaxLength(200);

                    b.Property<string>("ClassImage")
                        .HasMaxLength(200);

                    b.Property<string>("ClassName")
                        .HasMaxLength(50);

                    b.Property<string>("ClassRemark");

                    b.Property<string>("ClassType")
                        .HasMaxLength(50);

                    b.Property<int?>("Ctid")
                        .HasColumnName("CTId");

                    b.Property<int?>("DepId");

                    b.Property<string>("GuidCode")
                        .IsRequired()
                        .HasColumnName("Guid")
                        .HasMaxLength(36);

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsEnableed");

                    b.Property<bool?>("IsReg");

                    b.Property<bool?>("IsShow");

                    b.Property<DateTime?>("RegEndDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("RegStartDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Remark");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime");

                    b.Property<decimal?>("Tuition");

                    b.HasKey("Id");

                    b.HasIndex("Ctid");

                    b.HasIndex("DepId");

                    b.ToTable("ClassInfo");
                });

            modelBuilder.Entity("QJ.Framework.Entity.Entities.Educational.ClassLession", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CLId");

                    b.Property<string>("Address")
                        .HasMaxLength(200);

                    b.Property<int?>("ClassId");

                    b.Property<decimal?>("Credit")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime?>("EndDateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("GuidCode")
                        .IsRequired()
                        .HasColumnName("Guid")
                        .HasMaxLength(36);

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsEnableed");

                    b.Property<int?>("LessionId");

                    b.Property<int?>("RealTotal");

                    b.Property<string>("Remark");

                    b.Property<int?>("ShouldTotal");

                    b.Property<DateTime?>("StartDateTime")
                        .HasColumnType("datetime");

                    b.Property<bool?>("Status")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("TeacherName")
                        .HasMaxLength(500);

                    b.Property<string>("TimeRemark")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("ClassId");

                    b.HasIndex("LessionId");

                    b.ToTable("ClassLession");
                });

            modelBuilder.Entity("QJ.Framework.Entity.Entities.Educational.ClassLessionItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CLIId");

                    b.Property<int?>("Clid")
                        .HasColumnName("CLId");

                    b.Property<decimal?>("Credit");

                    b.Property<DateTime?>("EndLessionTime")
                        .HasColumnType("datetime");

                    b.Property<string>("GuidCode")
                        .IsRequired()
                        .HasColumnName("Guid")
                        .HasMaxLength(36);

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsEnableed");

                    b.Property<DateTime?>("LessionDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("StartLessionTime")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("Clid");

                    b.ToTable("ClassLessionItem");
                });

            modelBuilder.Entity("QJ.Framework.Entity.Entities.Educational.ClassManager", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CMId");

                    b.Property<int?>("ClassId");

                    b.Property<string>("GuidCode")
                        .IsRequired()
                        .HasColumnName("Guid")
                        .HasMaxLength(36);

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsEnableed");

                    b.Property<int?>("WuId");

                    b.HasKey("Id");

                    b.HasIndex("ClassId");

                    b.HasIndex("WuId");

                    b.ToTable("ClassManager");
                });

            modelBuilder.Entity("QJ.Framework.Entity.Entities.Educational.ClassType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CTId");

                    b.Property<string>("GuidCode")
                        .IsRequired()
                        .HasColumnName("Guid")
                        .HasMaxLength(36);

                    b.Property<int?>("Iorder");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsEnableed");

                    b.Property<int?>("ParentId");

                    b.Property<string>("Remark");

                    b.Property<bool?>("Status")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("TypeCode")
                        .HasMaxLength(50);

                    b.Property<string>("TypeName")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("ClassType");
                });

            modelBuilder.Entity("QJ.Framework.Entity.Entities.Educational.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DepId");

                    b.Property<string>("DepCode")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("DepName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("GuidCode")
                        .IsRequired()
                        .HasColumnName("Guid")
                        .HasMaxLength(36);

                    b.Property<int?>("Iorder");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsEnableed");

                    b.Property<int?>("ParentDepId");

                    b.Property<string>("Remark")
                        .HasMaxLength(200);

                    b.Property<bool?>("Status")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((0))");

                    b.HasKey("Id");

                    b.ToTable("Department");
                });

            modelBuilder.Entity("QJ.Framework.Entity.Entities.Educational.EducationExperience", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("EeId");

                    b.Property<string>("Education")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("EndDateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("GuidCode")
                        .IsRequired()
                        .HasColumnName("Guid")
                        .HasMaxLength(36);

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsEnableed");

                    b.Property<string>("SchoolName")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("StartDateTime")
                        .HasColumnType("datetime");

                    b.Property<int?>("StudentId");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.ToTable("EducationExperience");
                });

            modelBuilder.Entity("QJ.Framework.Entity.Entities.Educational.Lession", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("LessionId");

                    b.Property<string>("GuidCode")
                        .IsRequired()
                        .HasColumnName("Guid")
                        .HasMaxLength(36);

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsEnableed");

                    b.Property<string>("LessionCode")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("LessionName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int?>("Ltid")
                        .HasColumnName("LTId");

                    b.Property<string>("Remark")
                        .HasMaxLength(200);

                    b.Property<bool?>("Status")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((0))");

                    b.HasKey("Id");

                    b.HasIndex("Ltid");

                    b.ToTable("Lession");
                });

            modelBuilder.Entity("QJ.Framework.Entity.Entities.Educational.LessionType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("LTId");

                    b.Property<string>("GuidCode")
                        .IsRequired()
                        .HasColumnName("Guid")
                        .HasMaxLength(36);

                    b.Property<int?>("Iorder");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsEnableed");

                    b.Property<int?>("ParentId");

                    b.Property<string>("Remark");

                    b.Property<bool?>("Status")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("TypeCode")
                        .HasMaxLength(50);

                    b.Property<string>("TypeName")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("LessionType");
                });

            modelBuilder.Entity("QJ.Framework.Entity.Entities.Educational.MarkupLession", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("MLId");

                    b.Property<int?>("ClassId");

                    b.Property<string>("GuidCode")
                        .IsRequired()
                        .HasColumnName("Guid")
                        .HasMaxLength(36);

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsEnableed");

                    b.Property<int?>("Lid")
                        .HasColumnName("LId");

                    b.Property<DateTime>("MlendTime")
                        .HasColumnName("MLEndTime")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("MlstartTime")
                        .HasColumnName("MLStartTime")
                        .HasColumnType("datetime");

                    b.Property<string>("Remark")
                        .HasMaxLength(200);

                    b.Property<bool?>("Status")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((0))");

                    b.HasKey("Id");

                    b.HasIndex("Lid");

                    b.ToTable("MarkupLession");
                });

            modelBuilder.Entity("QJ.Framework.Entity.Entities.Educational.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("StudentId");

                    b.Property<string>("Address")
                        .HasMaxLength(200);

                    b.Property<string>("Belief")
                        .HasMaxLength(100);

                    b.Property<DateTime?>("Birthday")
                        .HasColumnType("datetime");

                    b.Property<string>("CardId")
                        .HasMaxLength(50);

                    b.Property<string>("CharitDomain")
                        .HasMaxLength(200);

                    b.Property<DateTime?>("CreateDateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("Email")
                        .HasMaxLength(100);

                    b.Property<string>("EnglishLevel")
                        .HasMaxLength(50);

                    b.Property<string>("EnglishName")
                        .HasMaxLength(50);

                    b.Property<string>("Gender")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("GplcreateDate")
                        .HasColumnName("GPLCreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Gplscale")
                        .HasColumnName("GPLScale")
                        .HasMaxLength(50);

                    b.Property<string>("GuidCode")
                        .IsRequired()
                        .HasColumnName("Guid")
                        .HasMaxLength(36);

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsEnableed");

                    b.Property<bool?>("IsPassport");

                    b.Property<bool?>("IsUspassport")
                        .HasColumnName("IsUSPassport");

                    b.Property<string>("LessionIds")
                        .HasMaxLength(200);

                    b.Property<string>("LoginPass")
                        .HasMaxLength(200);

                    b.Property<string>("Mobile")
                        .HasMaxLength(50);

                    b.Property<string>("Nation")
                        .HasMaxLength(50);

                    b.Property<string>("Nationality")
                        .HasMaxLength(50);

                    b.Property<string>("NativePlace")
                        .HasMaxLength(50);

                    b.Property<string>("OpenKey")
                        .HasMaxLength(200);

                    b.Property<string>("OrgAddress")
                        .HasMaxLength(200);

                    b.Property<string>("OrgBack")
                        .HasMaxLength(200);

                    b.Property<string>("OrgName")
                        .HasMaxLength(50);

                    b.Property<string>("PassportImg")
                        .HasMaxLength(200);

                    b.Property<string>("PassportNum")
                        .HasMaxLength(50);

                    b.Property<string>("PassportValid")
                        .HasMaxLength(50);

                    b.Property<string>("Photo")
                        .HasMaxLength(200);

                    b.Property<string>("PostName")
                        .HasMaxLength(50);

                    b.Property<string>("Qq")
                        .HasColumnName("QQ")
                        .HasMaxLength(50);

                    b.Property<string>("QqopenId")
                        .HasColumnName("QQOpenId")
                        .HasMaxLength(200);

                    b.Property<string>("RealName")
                        .HasMaxLength(50);

                    b.Property<string>("Remark");

                    b.Property<string>("Taboo")
                        .HasMaxLength(100);

                    b.Property<string>("UrgentEmail")
                        .HasMaxLength(100);

                    b.Property<string>("UrgentFax")
                        .HasMaxLength(50);

                    b.Property<string>("UrgentMobile")
                        .HasMaxLength(50);

                    b.Property<string>("UrgentName")
                        .HasMaxLength(50);

                    b.Property<string>("UrgentPhone")
                        .HasMaxLength(50);

                    b.Property<string>("VisaImg")
                        .HasMaxLength(200);

                    b.Property<string>("VisaType")
                        .HasMaxLength(50);

                    b.Property<string>("VisaValid")
                        .HasMaxLength(50);

                    b.Property<string>("WeChart")
                        .HasMaxLength(50);

                    b.Property<string>("Weibo")
                        .HasMaxLength(50);

                    b.Property<string>("WeixinOpenId")
                        .HasMaxLength(200);

                    b.Property<string>("WelfareWorkTimeSpan")
                        .HasMaxLength(50);

                    b.Property<string>("WorkPhone")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Student");
                });

            modelBuilder.Entity("QJ.Framework.Entity.Entities.Educational.StudentClass", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SCId");

                    b.Property<int?>("ClassId");

                    b.Property<string>("GuidCode")
                        .IsRequired()
                        .HasColumnName("Guid")
                        .HasMaxLength(36);

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsEnableed");

                    b.Property<bool?>("IsTemporary");

                    b.Property<int?>("StudentId");

                    b.HasKey("Id");

                    b.HasIndex("ClassId");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentClass");
                });

            modelBuilder.Entity("QJ.Framework.Entity.Entities.Educational.StudentCode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SCId");

                    b.Property<string>("GuidCode")
                        .IsRequired()
                        .HasColumnName("Guid")
                        .HasMaxLength(36);

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsEnableed");

                    b.Property<string>("Sccode")
                        .HasColumnName("SCCode")
                        .HasMaxLength(50);

                    b.Property<string>("SccodeType")
                        .HasColumnName("SCCodeType")
                        .HasMaxLength(50);

                    b.Property<int?>("StudentId");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentCode");
                });

            modelBuilder.Entity("QJ.Framework.Entity.Entities.Educational.StudentLeave", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("LId");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<string>("GuidCode")
                        .IsRequired()
                        .HasColumnName("Guid")
                        .HasMaxLength(36);

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsEnableed");

                    b.Property<string>("LeaveContent")
                        .HasMaxLength(200);

                    b.Property<string>("LeaveTitle")
                        .HasMaxLength(50);

                    b.Property<string>("Remark")
                        .HasMaxLength(200);

                    b.Property<int?>("Rstatus")
                        .HasColumnName("RStatus");

                    b.Property<int?>("Slid")
                        .HasColumnName("SLId");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((0))");

                    b.HasKey("Id");

                    b.HasIndex("Slid");

                    b.ToTable("StudentLeave");
                });

            modelBuilder.Entity("QJ.Framework.Entity.Entities.Educational.StudentLession", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SLId");

                    b.Property<DateTime?>("CheckinTime")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("CheckoutTime")
                        .HasColumnType("datetime");

                    b.Property<int?>("Cliid")
                        .HasColumnName("CLIId");

                    b.Property<decimal?>("Credit");

                    b.Property<string>("GuidCode")
                        .IsRequired()
                        .HasColumnName("Guid")
                        .HasMaxLength(36);

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsEnableed");

                    b.Property<string>("Remark")
                        .HasMaxLength(200);

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("StudentId");

                    b.HasKey("Id");

                    b.HasIndex("Cliid");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentLession");
                });

            modelBuilder.Entity("QJ.Framework.Entity.Entities.Educational.StudentProperty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SPId");

                    b.Property<string>("GuidCode")
                        .IsRequired()
                        .HasColumnName("Guid")
                        .HasMaxLength(36);

                    b.Property<int?>("Iorder");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsEnableed");

                    b.Property<string>("Spname")
                        .HasColumnName("SPName")
                        .HasMaxLength(100);

                    b.Property<string>("Spvalue")
                        .HasColumnName("SPValue")
                        .HasMaxLength(200);

                    b.Property<int?>("StudentId");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentProperty");
                });

            modelBuilder.Entity("QJ.Framework.Entity.Entities.Educational.Teacher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("TeacherId");

                    b.Property<string>("AccountNumber")
                        .HasMaxLength(50);

                    b.Property<string>("Address")
                        .HasMaxLength(200);

                    b.Property<string>("AppointmentType")
                        .HasMaxLength(50);

                    b.Property<string>("AssessmentContent")
                        .HasMaxLength(500);

                    b.Property<string>("AssessmentScore")
                        .HasMaxLength(50);

                    b.Property<string>("BankAccount")
                        .HasMaxLength(50);

                    b.Property<string>("ClassCost")
                        .HasMaxLength(50);

                    b.Property<string>("Contacts")
                        .HasMaxLength(50);

                    b.Property<string>("Coordinator")
                        .HasMaxLength(50);

                    b.Property<string>("Email")
                        .HasMaxLength(100);

                    b.Property<string>("EnglishName")
                        .HasMaxLength(50);

                    b.Property<string>("Gender")
                        .HasMaxLength(50);

                    b.Property<string>("GuidCode")
                        .IsRequired()
                        .HasColumnName("Guid")
                        .HasMaxLength(36);

                    b.Property<int?>("Iorder");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsEnableed");

                    b.Property<bool?>("IsScanning");

                    b.Property<bool?>("IsShow");

                    b.Property<string>("Matters")
                        .HasMaxLength(500);

                    b.Property<string>("Mobile")
                        .HasMaxLength(50);

                    b.Property<string>("Nationality")
                        .HasMaxLength(50);

                    b.Property<string>("OtherContacts")
                        .HasMaxLength(50);

                    b.Property<string>("PassportStatus")
                        .HasMaxLength(50);

                    b.Property<string>("PassportTimeSpan")
                        .HasMaxLength(50);

                    b.Property<string>("PersonRemark");

                    b.Property<string>("Photo")
                        .HasMaxLength(200);

                    b.Property<string>("PostName")
                        .HasMaxLength(500);

                    b.Property<string>("RealName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Remark");

                    b.Property<int>("SysUserId");

                    b.Property<string>("TeachLessions")
                        .HasMaxLength(500);

                    b.Property<string>("WorkPhone")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("SysUserId");

                    b.ToTable("Teacher");
                });

            modelBuilder.Entity("QJ.Framework.Entity.Entities.Educational.TeacherProperty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("TPId");

                    b.Property<string>("GuidCode")
                        .IsRequired()
                        .HasColumnName("Guid")
                        .HasMaxLength(36);

                    b.Property<int?>("Iorder");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsEnableed");

                    b.Property<int?>("TeacherId");

                    b.Property<string>("Tpname")
                        .HasColumnName("TPName")
                        .HasMaxLength(100);

                    b.Property<string>("Tpvalue")
                        .HasColumnName("TPValue")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("TeacherId");

                    b.ToTable("TeacherProperty");
                });

            modelBuilder.Entity("QJ.Framework.Entity.Entities.Educational.WorkExperience", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("WeId");

                    b.Property<DateTime?>("EndDateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("GuidCode")
                        .IsRequired()
                        .HasColumnName("Guid")
                        .HasMaxLength(36);

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsEnableed");

                    b.Property<DateTime?>("StartDateTime")
                        .HasColumnType("datetime");

                    b.Property<int?>("StudentId");

                    b.Property<string>("UnitName")
                        .HasMaxLength(50);

                    b.Property<string>("UnitPost")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.ToTable("WorkExperience");
                });

            modelBuilder.Entity("QJ.Framework.Entity.Entities.Educational.WorkUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("WuId");

                    b.Property<string>("AccountNumber")
                        .HasMaxLength(50);

                    b.Property<string>("Address")
                        .HasMaxLength(200);

                    b.Property<string>("BankAccount")
                        .HasMaxLength(50);

                    b.Property<int?>("DepId");

                    b.Property<string>("Email")
                        .HasMaxLength(100);

                    b.Property<string>("EnglishName")
                        .HasMaxLength(50);

                    b.Property<string>("Gender")
                        .HasMaxLength(50);

                    b.Property<string>("GuidCode")
                        .IsRequired()
                        .HasColumnName("Guid")
                        .HasMaxLength(36);

                    b.Property<int?>("Iorder");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsEnableed");

                    b.Property<string>("Mobile")
                        .HasMaxLength(50);

                    b.Property<string>("Photo")
                        .HasMaxLength(200);

                    b.Property<string>("PostName")
                        .HasMaxLength(50);

                    b.Property<string>("RealName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Remark")
                        .HasMaxLength(200);

                    b.Property<int>("SysUserId");

                    b.Property<string>("WorkPhone")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("DepId");

                    b.HasIndex("SysUserId");

                    b.ToTable("WorkUser");
                });

            modelBuilder.Entity("QJ.Framework.Entity.Entities.Educational.WorkUserProperty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("WPId");

                    b.Property<string>("GuidCode")
                        .IsRequired()
                        .HasColumnName("Guid")
                        .HasMaxLength(36);

                    b.Property<int?>("Iorder");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsEnableed");

                    b.Property<string>("Wpname")
                        .HasColumnName("WPName")
                        .HasMaxLength(100);

                    b.Property<string>("Wpvalue")
                        .HasColumnName("WPValue")
                        .HasMaxLength(200);

                    b.Property<int?>("WuId");

                    b.HasKey("Id");

                    b.HasIndex("WuId");

                    b.ToTable("WorkUserProperty");
                });

            modelBuilder.Entity("QJ.Framework.Entity.Entities.System.RoleAuthorize", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("CreateUser")
                        .HasMaxLength(50);

                    b.Property<string>("GuidCode")
                        .IsRequired()
                        .HasColumnName("Guid")
                        .HasMaxLength(36);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<bool>("IsEnableed")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<int>("MenuId");

                    b.Property<int>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("MenuId");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleAuthorize");
                });

            modelBuilder.Entity("QJ.Framework.Entity.Entities.System.SysDict", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("CreateUser")
                        .HasMaxLength(50);

                    b.Property<string>("DictCode")
                        .HasMaxLength(50);

                    b.Property<string>("DictName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("GuidCode")
                        .IsRequired()
                        .HasColumnName("Guid")
                        .HasMaxLength(36);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<bool>("IsEnableed");

                    b.Property<bool?>("IsNav");

                    b.Property<bool?>("IsTree");

                    b.Property<DateTime?>("ModifyTime")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifyUser")
                        .HasMaxLength(50);

                    b.Property<int?>("ParentId");

                    b.Property<string>("Remark")
                        .HasColumnType("text");

                    b.Property<int?>("SortCode")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.ToTable("SysDict");
                });

            modelBuilder.Entity("QJ.Framework.Entity.Entities.System.SysDictDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("CreateUser")
                        .HasMaxLength(50);

                    b.Property<string>("GuidCode")
                        .IsRequired()
                        .HasColumnName("Guid")
                        .HasMaxLength(36);

                    b.Property<bool?>("IsDefault");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<bool>("IsEnableed");

                    b.Property<string>("ItemCode")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("ItemName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("ItemValue")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<DateTime?>("ModifyTime")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifyUser")
                        .HasMaxLength(50);

                    b.Property<int?>("ParentId");

                    b.Property<string>("Remark")
                        .HasColumnType("text");

                    b.Property<int?>("SortCode")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<int>("SysDictId");

                    b.HasKey("Id");

                    b.HasIndex("SysDictId");

                    b.ToTable("SysDictDetail");
                });

            modelBuilder.Entity("QJ.Framework.Entity.Entities.System.SysLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Account")
                        .HasMaxLength(50);

                    b.Property<string>("Browser")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("CreateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("Exception")
                        .HasMaxLength(2000);

                    b.Property<string>("GuidCode")
                        .IsRequired()
                        .HasColumnName("Guid")
                        .HasMaxLength(36);

                    b.Property<string>("IP")
                        .HasMaxLength(50);

                    b.Property<string>("IPAddress")
                        .HasMaxLength(50);

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsEnableed");

                    b.Property<string>("LogLevel")
                        .HasMaxLength(50);

                    b.Property<string>("Message")
                        .HasMaxLength(2000);

                    b.Property<string>("Operation")
                        .HasMaxLength(50);

                    b.Property<string>("RealName")
                        .HasMaxLength(50);

                    b.Property<string>("Request")
                        .HasMaxLength(200);

                    b.Property<string>("StackTrace")
                        .HasMaxLength(2000);

                    b.HasKey("Id");

                    b.ToTable("SysLog");
                });

            modelBuilder.Entity("QJ.Framework.Entity.Entities.System.SysMenu", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("CreateUser")
                        .HasMaxLength(50);

                    b.Property<string>("EnCode")
                        .HasMaxLength(50);

                    b.Property<string>("GuidCode")
                        .IsRequired()
                        .HasColumnName("Guid")
                        .HasMaxLength(36);

                    b.Property<string>("Icon")
                        .HasMaxLength(50);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<bool?>("IsEdit");

                    b.Property<bool>("IsEnableed");

                    b.Property<bool?>("IsPublic");

                    b.Property<string>("JsEvent")
                        .HasMaxLength(50);

                    b.Property<int?>("Layer");

                    b.Property<string>("MenuName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<DateTime?>("ModifyTime")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifyUser")
                        .HasMaxLength(50);

                    b.Property<int?>("ParentId");

                    b.Property<string>("Remark")
                        .HasColumnType("text");

                    b.Property<int?>("SortCode")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<int?>("Type");

                    b.Property<string>("Url")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("SysMenu");
                });

            modelBuilder.Entity("QJ.Framework.Entity.Entities.System.SysOrganize", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address")
                        .HasMaxLength(200);

                    b.Property<DateTime>("CreateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("CreateUser")
                        .HasMaxLength(50);

                    b.Property<string>("Email")
                        .HasMaxLength(200);

                    b.Property<string>("EnCode")
                        .HasMaxLength(50);

                    b.Property<string>("Fax")
                        .HasMaxLength(50);

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("GuidCode")
                        .IsRequired()
                        .HasColumnName("Guid")
                        .HasMaxLength(36);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<bool>("IsEnableed");

                    b.Property<int?>("Layer");

                    b.Property<string>("ManagerId")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("ModifyTime")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifyUser")
                        .HasMaxLength(50);

                    b.Property<int?>("ParentId");

                    b.Property<string>("Remark")
                        .HasColumnType("text");

                    b.Property<int?>("SortCode")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<string>("TelePhone")
                        .HasMaxLength(50);

                    b.Property<int?>("Type");

                    b.Property<string>("WeChat")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("SysOrganize");
                });

            modelBuilder.Entity("QJ.Framework.Entity.Entities.System.SysRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool?>("AllowEdit");

                    b.Property<DateTime>("CreateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("CreateUser")
                        .HasMaxLength(50);

                    b.Property<string>("EnCode")
                        .HasMaxLength(50);

                    b.Property<string>("GuidCode")
                        .IsRequired()
                        .HasColumnName("Guid")
                        .HasMaxLength(36);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<bool>("IsEnableed");

                    b.Property<DateTime?>("ModifyTime")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifyUser")
                        .HasMaxLength(50);

                    b.Property<int?>("OrganizeId");

                    b.Property<string>("Remark")
                        .HasColumnType("text");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int?>("SortCode")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<int?>("Type");

                    b.HasKey("Id");

                    b.HasIndex("OrganizeId");

                    b.ToTable("SysRole");
                });

            modelBuilder.Entity("QJ.Framework.Entity.Entities.System.SysUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Account")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Address")
                        .HasMaxLength(200);

                    b.Property<DateTime?>("AllowEndTime")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("AllowStartTime")
                        .HasColumnType("datetime");

                    b.Property<string>("AnswerQuestion")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Birthday")
                        .HasColumnType("datetime");

                    b.Property<string>("CardId")
                        .HasMaxLength(50);

                    b.Property<int?>("CheckOnLine");

                    b.Property<DateTime>("CreateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("CreateUser")
                        .HasMaxLength(50);

                    b.Property<int?>("DepartmentId");

                    b.Property<string>("DutyName")
                        .HasMaxLength(50);

                    b.Property<string>("Email")
                        .HasMaxLength(200);

                    b.Property<string>("EnCode")
                        .HasMaxLength(50);

                    b.Property<bool?>("Gender");

                    b.Property<string>("GuidCode")
                        .IsRequired()
                        .HasColumnName("Guid")
                        .HasMaxLength(36);

                    b.Property<string>("HeadIcon")
                        .HasMaxLength(255);

                    b.Property<bool>("HeadIsNew");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<bool>("IsEnableed");

                    b.Property<DateTime?>("LastLoginTime")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("LockEndDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("LockStartDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("LogOnCount");

                    b.Property<string>("MSN")
                        .HasMaxLength(50);

                    b.Property<string>("MobilePhone")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<DateTime?>("ModifyTime")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifyUser")
                        .HasMaxLength(50);

                    b.Property<int?>("Nation");

                    b.Property<string>("NickName")
                        .HasMaxLength(50);

                    b.Property<int?>("OrganizeId");

                    b.Property<string>("Origin")
                        .HasMaxLength(255);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<int?>("Political")
                        .HasMaxLength(50);

                    b.Property<string>("QQ")
                        .HasMaxLength(50);

                    b.Property<string>("Question")
                        .HasColumnType("text");

                    b.Property<string>("RealName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Remark")
                        .HasColumnType("text");

                    b.Property<string>("Secretkey")
                        .HasMaxLength(255);

                    b.Property<string>("Signature")
                        .HasMaxLength(50);

                    b.Property<string>("SimpleSpelling")
                        .HasMaxLength(50);

                    b.Property<string>("Telephone")
                        .HasMaxLength(50);

                    b.Property<int?>("UserOnLine");

                    b.Property<int?>("UserType");

                    b.Property<string>("WeChat")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("OrganizeId");

                    b.ToTable("SysUser");
                });

            modelBuilder.Entity("QJ.Framework.Entity.Entities.System.UserAuthorize", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("CreateUser")
                        .HasMaxLength(50);

                    b.Property<string>("GuidCode")
                        .IsRequired()
                        .HasColumnName("Guid")
                        .HasMaxLength(36);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<bool>("IsEnableed")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<int>("MenuId");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("MenuId");

                    b.HasIndex("UserId");

                    b.ToTable("UserAuthorize");
                });

            modelBuilder.Entity("QJ.Framework.Entity.Entities.System.UserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("CreateUser")
                        .HasMaxLength(50);

                    b.Property<string>("GuidCode")
                        .IsRequired()
                        .HasColumnName("Guid")
                        .HasMaxLength(36);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<bool>("IsEnableed")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<int>("RoleId");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRole");
                });

            modelBuilder.Entity("QJ.Framework.Entity.Entities.Educational.ClassInfo", b =>
                {
                    b.HasOne("QJ.Framework.Entity.Entities.Educational.ClassType", "Ct")
                        .WithMany("ClassInfo")
                        .HasForeignKey("Ctid")
                        .HasConstraintName("FK_CLASSINF_REFERENCE_CLASSTYP");

                    b.HasOne("QJ.Framework.Entity.Entities.Educational.Department", "Dep")
                        .WithMany("ClassInfo")
                        .HasForeignKey("DepId")
                        .HasConstraintName("FK_CLASSINF_REFERENCE_DEPARTME");
                });

            modelBuilder.Entity("QJ.Framework.Entity.Entities.Educational.ClassLession", b =>
                {
                    b.HasOne("QJ.Framework.Entity.Entities.Educational.ClassInfo", "Class")
                        .WithMany("ClassLession")
                        .HasForeignKey("ClassId")
                        .HasConstraintName("FK_CLASSLES_REFERENCE_CLASSINF");

                    b.HasOne("QJ.Framework.Entity.Entities.Educational.Lession", "Lession")
                        .WithMany("ClassLession")
                        .HasForeignKey("LessionId")
                        .HasConstraintName("FK_CLASSLES_REFERENCE_LESSION");
                });

            modelBuilder.Entity("QJ.Framework.Entity.Entities.Educational.ClassLessionItem", b =>
                {
                    b.HasOne("QJ.Framework.Entity.Entities.Educational.ClassLession", "Cl")
                        .WithMany("ClassLessionItem")
                        .HasForeignKey("Clid")
                        .HasConstraintName("FK_CLASSLES_REFERENCE_CLASSLES");
                });

            modelBuilder.Entity("QJ.Framework.Entity.Entities.Educational.ClassManager", b =>
                {
                    b.HasOne("QJ.Framework.Entity.Entities.Educational.ClassInfo", "Class")
                        .WithMany("ClassManager")
                        .HasForeignKey("ClassId")
                        .HasConstraintName("FK_CLASSMAN_REFERENCE_CLASSINF");

                    b.HasOne("QJ.Framework.Entity.Entities.Educational.WorkUser", "Wu")
                        .WithMany("ClassManager")
                        .HasForeignKey("WuId")
                        .HasConstraintName("FK_CLASSMAN_REFERENCE_WORKUSER");
                });

            modelBuilder.Entity("QJ.Framework.Entity.Entities.Educational.EducationExperience", b =>
                {
                    b.HasOne("QJ.Framework.Entity.Entities.Educational.Student", "Student")
                        .WithMany("EducationExperience")
                        .HasForeignKey("StudentId")
                        .HasConstraintName("FK_EDUCATIO_REFERENCE_STUDENT");
                });

            modelBuilder.Entity("QJ.Framework.Entity.Entities.Educational.Lession", b =>
                {
                    b.HasOne("QJ.Framework.Entity.Entities.Educational.LessionType", "Lt")
                        .WithMany("Lession")
                        .HasForeignKey("Ltid")
                        .HasConstraintName("FK_LESSION_REFERENCE_LESSIONT");
                });

            modelBuilder.Entity("QJ.Framework.Entity.Entities.Educational.MarkupLession", b =>
                {
                    b.HasOne("QJ.Framework.Entity.Entities.Educational.StudentLeave", "L")
                        .WithMany("MarkupLession")
                        .HasForeignKey("Lid")
                        .HasConstraintName("FK_MARKUPLE_REFERENCE_STUDENTL");
                });

            modelBuilder.Entity("QJ.Framework.Entity.Entities.Educational.StudentClass", b =>
                {
                    b.HasOne("QJ.Framework.Entity.Entities.Educational.ClassInfo", "Class")
                        .WithMany("StudentClass")
                        .HasForeignKey("ClassId")
                        .HasConstraintName("FK_STUDENTC_REFERENCE_CLASSINF");

                    b.HasOne("QJ.Framework.Entity.Entities.Educational.Student", "Student")
                        .WithMany("StudentClass")
                        .HasForeignKey("StudentId")
                        .HasConstraintName("FK_STUDENTC_REFERENCE_STUDENT");
                });

            modelBuilder.Entity("QJ.Framework.Entity.Entities.Educational.StudentCode", b =>
                {
                    b.HasOne("QJ.Framework.Entity.Entities.Educational.Student", "Student")
                        .WithMany("StudentCode")
                        .HasForeignKey("StudentId")
                        .HasConstraintName("FK_STUDENTC_REFERENCE_STUDENT2");
                });

            modelBuilder.Entity("QJ.Framework.Entity.Entities.Educational.StudentLeave", b =>
                {
                    b.HasOne("QJ.Framework.Entity.Entities.Educational.StudentLession", "Sl")
                        .WithMany("StudentLeave")
                        .HasForeignKey("Slid")
                        .HasConstraintName("FK_STUDENTL_REFERENCE_STUDENTL");
                });

            modelBuilder.Entity("QJ.Framework.Entity.Entities.Educational.StudentLession", b =>
                {
                    b.HasOne("QJ.Framework.Entity.Entities.Educational.ClassLessionItem", "Cli")
                        .WithMany("StudentLession")
                        .HasForeignKey("Cliid")
                        .HasConstraintName("FK_STUDENTL_REFERENCE_CLASSLES");

                    b.HasOne("QJ.Framework.Entity.Entities.Educational.Student", "Student")
                        .WithMany("StudentLession")
                        .HasForeignKey("StudentId")
                        .HasConstraintName("FK_STUDENTL_REFERENCE_STUDENT");
                });

            modelBuilder.Entity("QJ.Framework.Entity.Entities.Educational.StudentProperty", b =>
                {
                    b.HasOne("QJ.Framework.Entity.Entities.Educational.Student", "Student")
                        .WithMany("StudentProperty")
                        .HasForeignKey("StudentId")
                        .HasConstraintName("FK_STUDENTP_REFERENCE_STUDENT");
                });

            modelBuilder.Entity("QJ.Framework.Entity.Entities.Educational.Teacher", b =>
                {
                    b.HasOne("QJ.Framework.Entity.Entities.System.SysUser", "SysUser")
                        .WithMany()
                        .HasForeignKey("SysUserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("QJ.Framework.Entity.Entities.Educational.TeacherProperty", b =>
                {
                    b.HasOne("QJ.Framework.Entity.Entities.Educational.Teacher", "Teacher")
                        .WithMany("TeacherProperty")
                        .HasForeignKey("TeacherId")
                        .HasConstraintName("FK_TEACHERP_REFERENCE_TEACHER");
                });

            modelBuilder.Entity("QJ.Framework.Entity.Entities.Educational.WorkExperience", b =>
                {
                    b.HasOne("QJ.Framework.Entity.Entities.Educational.Student", "Student")
                        .WithMany("WorkExperience")
                        .HasForeignKey("StudentId")
                        .HasConstraintName("FK_WORKEXPE_REFERENCE_STUDENT");
                });

            modelBuilder.Entity("QJ.Framework.Entity.Entities.Educational.WorkUser", b =>
                {
                    b.HasOne("QJ.Framework.Entity.Entities.Educational.Department", "Dep")
                        .WithMany("WorkUser")
                        .HasForeignKey("DepId")
                        .HasConstraintName("FK_WORKUSER_REFERENCE_DEPARTME");

                    b.HasOne("QJ.Framework.Entity.Entities.System.SysUser", "SysUser")
                        .WithMany()
                        .HasForeignKey("SysUserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("QJ.Framework.Entity.Entities.Educational.WorkUserProperty", b =>
                {
                    b.HasOne("QJ.Framework.Entity.Entities.Educational.WorkUser", "Wu")
                        .WithMany("WorkUserProperty")
                        .HasForeignKey("WuId")
                        .HasConstraintName("FK_WORKUSER_REFERENCE_WORKUSER");
                });

            modelBuilder.Entity("QJ.Framework.Entity.Entities.System.RoleAuthorize", b =>
                {
                    b.HasOne("QJ.Framework.Entity.Entities.System.SysMenu", "Menu")
                        .WithMany("RoleAuthorizes")
                        .HasForeignKey("MenuId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("QJ.Framework.Entity.Entities.System.SysRole", "Role")
                        .WithMany("RoleAuthorizes")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("QJ.Framework.Entity.Entities.System.SysDictDetail", b =>
                {
                    b.HasOne("QJ.Framework.Entity.Entities.System.SysDict", "SysDict")
                        .WithMany("SysDictDetails")
                        .HasForeignKey("SysDictId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("QJ.Framework.Entity.Entities.System.SysRole", b =>
                {
                    b.HasOne("QJ.Framework.Entity.Entities.System.SysOrganize", "Organize")
                        .WithMany("SysRoles")
                        .HasForeignKey("OrganizeId");
                });

            modelBuilder.Entity("QJ.Framework.Entity.Entities.System.SysUser", b =>
                {
                    b.HasOne("QJ.Framework.Entity.Entities.System.SysOrganize", "Department")
                        .WithMany("SysDepUsers")
                        .HasForeignKey("DepartmentId");

                    b.HasOne("QJ.Framework.Entity.Entities.System.SysOrganize", "Organize")
                        .WithMany("SysOrgUsers")
                        .HasForeignKey("OrganizeId");
                });

            modelBuilder.Entity("QJ.Framework.Entity.Entities.System.UserAuthorize", b =>
                {
                    b.HasOne("QJ.Framework.Entity.Entities.System.SysMenu", "Menu")
                        .WithMany("UserAuthorizes")
                        .HasForeignKey("MenuId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("QJ.Framework.Entity.Entities.System.SysUser", "User")
                        .WithMany("UserAuthorizes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("QJ.Framework.Entity.Entities.System.UserRole", b =>
                {
                    b.HasOne("QJ.Framework.Entity.Entities.System.SysRole", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("QJ.Framework.Entity.Entities.System.SysUser", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
